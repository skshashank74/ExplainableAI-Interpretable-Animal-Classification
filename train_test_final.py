# -*- coding: utf-8 -*-
"""train_test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17h8M1wFUucvHBtAfip1PJFAkK5HoPOK-
"""

from google.colab import drive
drive.mount('/content/drive')

ext = 'drive/MyDrive/CV_Images/'#concentric.mat'

! pip install imagehash

import cv2
import numpy as np
import json
import os
import shutil
from PIL import Image
import imagehash
from sklearn.cluster import AgglomerativeClustering

"""# Crop the folder"""

def cropped(ele_name):
    input_path = ele_name + 'uncropped/'
    cropped_path = ele_name + 'cropped/'
    for image in os.listdir(cropped_path):
      try:
        os.remove(f'{cropped_path}{image}')
      except:
        "Meh"
    for each in os.listdir(input_path):
        ext = os.path.splitext(each)[-1]
        #print(each)
        if ext == '.json':
            filename = os.path.splitext(each)[0]
            #print(filename)
            f = open(input_path+filename+'.json')
            data = json.load(f)
            [[r1,c1],[r2,c2]] = data['shapes'][0]['points']
            img = cv2.imread(input_path+filename+'.JPG')
            if img is None:
              img = cv2.imread(input_path+filename+'.jpg')
            cropped = img[np.int64(np.floor(c1)):np.int64(np.floor(c2)),np.int64(np.floor(r1)):np.int64(np.floor(r2))]
            cv2.imwrite(cropped_path + filename +'.jpg', cropped)

for elephant in ['1002']:
  ele_name = ext + elephant +'/'
  cropped(ele_name)

"""# Imagehash + AgglomerativeClustering + test_train_validation"""

for elephant in ['1037','1031','1020','1012','1002']:
  print(elephant)
  path = ext+elephant+'/cropped/'#'sim_test/'
  image_list = os.listdir(path)
  hash_matrix = np.zeros((len(image_list), len(image_list)))

  #Hashing
  for each in range(len(image_list)):
    for every in range(len(image_list)):
      hash1 = imagehash.average_hash(Image.open(path+image_list[each]))
      hash2 = imagehash.average_hash(Image.open(path+image_list[every]))
      diff = hash1-hash2
      hash_matrix[each,every] = diff
  print("Hashing Matrix is done")

  # Agglomerative Clustering
  cluster = AgglomerativeClustering(n_clusters=3, affinity='precomputed', linkage='average')
  pred = cluster.fit_predict(hash_matrix)
  print("Agglomerative Clustering is done")

  # Segregation
  clust0_indices, clust1_indices, clust2_indices  = [i for i in range(len(pred)) if pred[i] == 0], [i for i in range(len(pred)) if pred[i] == 1], [i for i in range(len(pred)) if pred[i] == 2]
  clust0,clust1,clust2 = [image_list[i] for i in clust0_indices], [image_list[i] for i in clust1_indices], [image_list[i] for i in clust2_indices]  
  print("Segregation is done")

  # Writing to google drive
  for each in clust0:
    shutil.copy(path+each,ext+elephant+'/c0')
  print("Cluster0 done")

  for each in clust1:
    shutil.copy(path+each,ext+elephant+'/c1')
  print("Cluster1 done")

  for each in clust2:
    shutil.copy(path+each,ext+elephant+'/c2')
  print("Cluster2 done")

hash_matrix

"""Combining c0,c1,c2 into cropped_test/uncropped_test and train datasets"""

ext = 'drive/MyDrive/CV_Images/'

for elephant in ['1031','1012','1020','1037']:
  for each in os.listdir(ext+elephant+'/c0'):
    shutil.copy(ext+elephant+'/c0/'+each, ext+elephant+'/train/')

  for each in os.listdir(ext+elephant+'/c1'):
    shutil.copy(ext+elephant+'/c1/'+each, ext+elephant+'/cropped_test/')

  for each in os.listdir(ext+elephant+'/c2'):
    shutil.copy(ext+elephant+'/c2/'+each, ext+elephant+'/cropped_test/')
    shutil.copy(ext+elephant+'/c2/'+each, ext+elephant+'/cropped_test/')

for elephant in ['1002']:
  for each in os.listdir(ext+elephant+'/c0'):
    shutil.copy(ext+elephant+'/c0/'+each, ext+elephant+'/train/')

  for each in os.listdir(ext+elephant+'/c1'):
    shutil.copy(ext+elephant+'/c1/'+each, ext+elephant+'/train/')

  for each in os.listdir(ext+elephant+'/c2'):
    shutil.copy(ext+elephant+'/c2/'+each, ext+elephant+'/cropped_test/')

for elephant in ['1037','1031','1020','1012','1002']:
  for each in os.listdir(ext+elephant+'/cropped_test'):
    new_each = each.split('.')[0] +'.JPG'
    try:
      shutil.copy(ext+elephant+'/uncropped/'+new_each, ext+elephant+'/uncropped_test/')
    except:
      shutil.copy(ext+elephant+'/uncropped/'+each, ext+elephant+'/uncropped_test/')

